AWSTemplateFormatVersion: "2010-09-09"
Description: Connect - Comprehend/Transcribe Connect Demo
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: General Settings
        Parameters:
          - kibanaUser
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
    ParameterLabels:
      kibanaUser:
        default: The name of the user that is used to log into kibana.
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
Parameters:
  kibanaUser:
    Default: kibana
    Description: The name of the user that is used to log into kibana.
    Type: String
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription:
      Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description:
      S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription:
      Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: "quickstart-connect-voci/"
    Description:
      S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
Conditions:
  GovCloudCondition: !Equals [!Ref "AWS::Region", us-gov-west-1]
Resources:
# Lambda Portability Stack
# This stack will 
  LPStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        !Sub [
          "https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}templates/voci-lambda-portability.yaml",
          { QSS3Region: !If [GovCloudCondition, s3-us-gov-west-1, s3] },
        ]
      Parameters:
        LambdaZipsBucketName: !GetAtt S3Stack.Outputs.LambdaZipsBucketName
        QSS3BucketName: !Ref "QSS3BucketName"
        QSS3KeyPrefix: !Ref "QSS3KeyPrefix"
        LambdaZipObjects: !Join
          - ","
          - - functions/packages/checkElasticsearchStatus/lambda.zip
            - functions/packages/CheckTranscriptionJob/lambda.zip
            - functions/packages/elasticsearchCognito/lambda.zip
            - functions/packages/IndexCTRInElasticSearch/lambda.zip
            - functions/packages/IndexS3TranscriptionDataIntoES/lambda.zip
            - functions/packages/podcast-transcribe-index-podcastTranscribe/lambda.zip
            - functions/packages/podcast-transcribe-index-processTranscriptionFull/lambda.zip
            - functions/packages/ProcessTranscription/lambda.zip
            - functions/packages/S3ProcessNewAudio/lambda.zip
            - functions/packages/StartTranscriptionJob/lambda.zip

  # End Lambda Portability Management
  #**********************************
  # IAM Resources
  # Roles
  CognitoAuthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRoleWithWebIdentity
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
        Version: "2012-10-17"
  CognitoUnauthRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRoleWithWebIdentity
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
        Version: "2012-10-17"
    Type: AWS::IAM::Role
  CognitoAccessForAmazonES:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: es.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonESCognitoAccess
  LambdaServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - s3:*
                  - comprehend:*
                  - transcribe:*
                  - es:*
                  - states:StartExecution
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - kinesis:GetRecords
                  - kinesis:GetShardIterator
                  - kinesis:DescribeStream
                  - kinesis:ListStreams
                  - cognito-idp:*
                  - iam:PassRole
                  - kms:*
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: LambdaServiceRolePolicy
  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - Fn::Sub: states.${AWS::Region}.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - lambda:InvokeFunction
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: StatesExecutionPolicy
  # Policies
  CognitoAccessForAmazonESPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: elasticsearch and rekognition cognito role
      PolicyDocument:
        Statement:
          - Action:
              - iam:GetRole
              - iam:PassRole
              - iam:CreateRole
              - iam:AttachRolePolicy
              - ec2:DescribeVpcs
              - cognito-identity:ListIdentityPools
              - cognito-identity:DescribeIdentityPool
              - cognito-idp:ListUserPools
              - cognito-idp:DescribeUserPool
              - cognito-idp:CreateUserPoolDomain
              - cognito-idp:DeleteUserPoolDomain
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      Roles:
        - Ref: CognitoAccessForAmazonES
  CognitoAuthKibanaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: elasticsearch and rekognition cognito role
      PolicyDocument:
        Statement:
          - Action:
              - es:ESHttp*
            Effect: Allow
            Resource:
              Fn::Sub: arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*
        Version: "2012-10-17"
      Roles:
        - Ref: CognitoAuthRole
  # End IAM Resources
  #**********************************
  # Cognito Resources
  CognitoIdentityPoolRole:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: CognitoIdentityPool
      Roles:
        authenticated:
          Fn::GetAtt:
            - CognitoAuthRole
            - Arn
        unauthenticated:
          Fn::GetAtt:
            - CognitoUnauthRole
            - Arn
  CognitoApplicationClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName:
        Fn::Sub: ${AWS::StackName}-appclient
      GenerateSecret: false
      RefreshTokenValidity: 2
      UserPoolId:
        Ref: CognitoUserPool
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId:
            Ref: CognitoApplicationClient
          ProviderName:
            Fn::Sub: cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}
          ServerSideTokenCheck: false
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailMessage:
            "Welcome to the Connect Indexer. Username: {username} Pwd:
            {####}"
          EmailSubject: Welcome to Connect Indexer.
          SMSMessage: "Welcome to Connect Indexer. Username: {username} Pwd: {####}"
        UnusedAccountValidityDays: 14
      AliasAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      EmailVerificationMessage:
        "Welcome to the Connect Indexer. Here is your confirmation
        code: {####}"
      EmailVerificationSubject: Connect Indexer Email Confirmation Code
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      UserPoolName:
        Fn::Sub: ${AWS::StackName}-users
  # End Cognito Resources
  #**********************************
  # Serverless Functions
  elasticsearchCognito:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !GetAtt S3Stack.Outputs.LambdaZipsBucketName
        Key: !Sub "${QSS3KeyPrefix}functions/packages/elasticsearchCognito/lambda.zip"
      Description: ""
      Environment:
        Variables:
          STEP_FUNCTION_ARN:
            Ref: CfnStepFunction
      Handler: elasticsearch-cognito.lambda_handler
      MemorySize: 512
      Role:
        Fn::GetAtt:
          - LambdaServiceRole
          - Arn
      Runtime: python2.7
      Timeout: 240
    DependsOn: LPStack
  checkElasticsearchStatus:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !GetAtt S3Stack.Outputs.LambdaZipsBucketName
        Key: !Sub "${QSS3KeyPrefix}functions/packages/checkElasticsearchStatus/lambda.zip"
      Description: ""
      Handler: elasticsearch-cognito.check_status
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - LambdaServiceRole
          - Arn
      Runtime: python2.7
      Timeout: 15
    DependsOn: LPStack
  indexIntoElasticsearch:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !GetAtt S3Stack.Outputs.LambdaZipsBucketName
        Key: !Sub "${QSS3KeyPrefix}functions/packages/IndexS3TranscriptionDataIntoES/lambda.zip"
      Description: "Lambda funcion that indexes the Transcription and NLP entties/keyphrases"
      Environment:
        Variables:
          ES_DOMAIN:
            Fn::GetAtt:
              - CallsElasticSearch
              - DomainEndpoint
          ES_EPISODE_INDEX: "reinvent-2018-workshop"
      Handler: upload_to_elasticsearch.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - LambdaServiceRole
          - Arn
      Runtime: python2.7
      Timeout: 60
      Events:
        Stream:
          Type: Kinesis
          Properties:
            Stream: !GetAtt CTRStream.Arn
            BatchSize: 100
            StartingPosition: LATEST
    DependsOn: LPStack
  startTranscriptionJob:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !GetAtt S3Stack.Outputs.LambdaZipsBucketName
        Key: !Sub "${QSS3KeyPrefix}functions/packages/podcast-transcribe-index-podcastTranscribe/lambda.zip"
      Description: "Lambda funcion that starts the Transcription job"
      Handler: podcast_transcribe.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - LambdaServiceRole
          - Arn
      Runtime: python2.7
      Timeout: 60
    DependsOn: LPStack
  checkTranscriptionJob:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !GetAtt S3Stack.Outputs.LambdaZipsBucketName
        Key: !Sub "${QSS3KeyPrefix}functions/packages/CheckTranscriptionJob/lambda.zip"
      Description: "Lambda funcion that starts the Transcription job"
      Handler: check_transcribe.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - LambdaServiceRole
          - Arn
      Runtime: python2.7
      Timeout: 60
    DependsOn: LPStack
  processTranscriptionJob:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !GetAtt S3Stack.Outputs.LambdaZipsBucketName
        Key: !Sub "${QSS3KeyPrefix}functions/packages/podcast-transcribe-index-processTranscriptionFull/lambda.zip"
      Description: "Lambda funcion that starts the Transcription job"
      Environment:
        Variables:
          BUCKET_NAME: !GetAtt S3Stack.Outputs.AudioTranscriptionBucketName
      Handler: process_transcription_full_text.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - LambdaServiceRole
          - Arn
      Runtime: python2.7
      Timeout: 60
    DependsOn: LPStack
  indexCTRInElasticSearch:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !GetAtt S3Stack.Outputs.LambdaZipsBucketName
        Key: !Sub "${QSS3KeyPrefix}functions/packages/IndexCTRInElasticSearch/lambda.zip"
      Description: "Lambda funcion that starts the Transcription job"
      Environment:
        Variables:
          ES_DOMAIN:
            Fn::GetAtt:
              - CallsElasticSearch
              - DomainEndpoint
          ES_EPISODE_INDEX: "reinvent-2018-workshop"
      Handler: upload_to_elasticsearch.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - LambdaServiceRole
          - Arn
      Runtime: python2.7
      Timeout: 60
    DependsOn: LPStack
  kickOffStepFunctionsFromS3Event:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !GetAtt S3Stack.Outputs.LambdaZipsBucketName
        Key: !Sub "${QSS3KeyPrefix}functions/packages/S3ProcessNewAudio/lambda.zip"
      Description: "Lambda funcion that starts the Transcription job"
      Environment:
        Variables:
          STEP_FUNCTIONS_ARN: !Ref processAudioFile
      Handler: lambda_function.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - LambdaServiceRole
          - Arn
      Runtime: python2.7
      Timeout: 60
    DependsOn: LPStack
  # End Serverless Functions
  #**********************************
  # Step Functions
  CfnStepFunction:
    Type: AWS::StepFunctions::StateMachine
    DependsOn:
      - checkElasticsearchStatus
    Properties:
      DefinitionString:
        Fn::Sub:
          "{\n  \"StartAt\": \"checkAction\",\n  \"States\": {\n    \"checkAction\"\
          : { \n        \"Type\": \"Task\",\n        \"Resource\": \"${checkElasticsearchStatus.Arn}\"\
          ,\n        \"InputPath\": \"$\",\n        \"ResultPath\": \"$\",\n     \
          \   \"Next\": \"IsActionComplete\"\n    },\n    \"IsActionComplete\": {\n\
          \     \"Type\": \"Choice\",\n                  \"Choices\": [\n        \
          \            {\n                      \"Variable\": \"$.response.Status\"\
          ,\n                      \"StringEquals\": \"IN_PROCESS\",\n           \
          \           \"Next\": \"Wait\"\n                    }\n                \
          \  ],\n                  \"Default\": \"Complete\"\n     },\n    \"Wait\"\
          : {\n      \"Type\": \"Wait\",\n      \"Seconds\": 30,\n      \"Next\":\
          \ \"checkAction\"\n    },\n    \"Complete\": { \n      \"Type\": \"Pass\"\
          ,\n      \"End\": true\n    }\n  }\n}"
      RoleArn:
        Fn::GetAtt:
          - StatesExecutionRole
          - Arn
  processAudioFile:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        Fn::Sub: "{\n  \"StartAt\": \"Start Amazon Transcribe\",\n  \"States\": {\n    \"Start Amazon Transcribe\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${startTranscriptionJob.Arn}\",\n      \"InputPath\": \"$\",\n      \"ResultPath\": \"$.transcribe\",\n      \"Next\": \"Check Transcribe Status\",\n      \"Retry\": [\n        {\n          \"ErrorEquals\": [ \"ThrottlingException\" ],\n          \"IntervalSeconds\": 120,\n          \"BackoffRate\": 1,\n          \"MaxAttempts\": 1000\n        },\n        {\n          \"ErrorEquals\": [ \"States.ALL\" ],\n          \"IntervalSeconds\": 60,\n          \"BackoffRate\": 2,\n          \"MaxAttempts\": 3\n        }\n      ]\n    },\n    \"Check Transcribe Status\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${checkTranscriptionJob.Arn}\",\n      \"InputPath\": \"$.transcribe\",\n      \"ResultPath\": \"$.transcribeStatus\",\n      \"Next\": \"Is Transcribe Completed?\"\n    },\n    \"Wait for Transcribe Completion\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 60,\n      \"Next\": \"Check Transcribe Status\"\n    },\n    \"Is Transcribe Completed?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.transcribeStatus.status\",\n          \"StringEquals\": \"COMPLETED\",\n          \"Next\": \"Process Transcription\"\n        }\n      ],\n      \"Default\": \"Wait for Transcribe Completion\"\n    },\n    \"Process Transcription\": {\n      \"Type\": \"Parallel\",\n      \"Branches\": [\n        {\n          \"StartAt\": \"Generate Full Text Transcript\",\n          \"States\": {\n            \"Generate Full Text Transcript\": {\n              \"Type\": \"Task\",\n              \"Resource\": \"${processTranscriptionJob.Arn}\",\n              \"End\": true\n            }\n          }\n        }\n      ],\n      \"ResultPath\": \"$.processedTranscription\",\n      \"Next\": \"Upload To Elasticsearch\"\n    },\n    \"Upload To Elasticsearch\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${indexIntoElasticsearch.Arn}\",\n      \"InputPath\": \"$\",\n      \"ResultPath\": \"$.elasticsearchResult\",\n      \"Next\": \"Complete\"\n    },\n    \"Complete\": {\n      \"Type\": \"Succeed\"\n    }\n  }\n}"
      RoleArn:
        Fn::GetAtt:
          - StatesExecutionRole
          - Arn
  # End Step Functions
  #**********************************
  # Other Resources
  S3Stack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL:
        !Sub [
          "https://${QSS3BucketName}.${QSS3Region}.amazonaws.com/${QSS3KeyPrefix}templates/voci-s3.yaml",
          { QSS3Region: !If [GovCloudCondition, s3-us-gov-west-1, s3] },
        ]
  ESCognito:
    Type: Custom::ESName
    Properties:
      IdentityPoolId:
        Ref: CognitoIdentityPool
      ServiceToken:
        Fn::GetAtt:
          - elasticsearchCognito
          - Arn
      StackName:
        Ref: AWS::StackName
      UserPoolId:
        Ref: CognitoUserPool
      esCluster:
        Ref: CallsElasticSearch
      esRoleArn:
        Fn::GetAtt:
          - CognitoAccessForAmazonES
          - Arn
      kibanaUser:
        Ref: kibanaUser
  CTRStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: Connect-CTR-Stream
      RetentionPeriodHours: 24
      ShardCount: 1
  CallsElasticSearch:
    Type: AWS::Elasticsearch::Domain
    Properties:
      ElasticsearchVersion: "6.3"
      ElasticsearchClusterConfig:
        InstanceCount: 1
        InstanceType: "m4.large.elasticsearch"
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: gp2
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Join [":", ["arn:aws:iam:", !Ref "AWS::AccountId", "root"]]
            Action: "es:*"
            Resource: "*"
# End Other Resources

Outputs:
  KibanaUrl:
    Description: A hyperlink to the Kibana tool
    Value:
      Fn::Sub: https://${CallsElasticSearch.DomainEndpoint}/_plugin/kibana/

  KibanaPassword:
    Description: The password for the kibana user
    Value:
      Fn::GetAtt:
        - ESCognito
        - KibanaPassword

  KibanaUser:
    Description: The username for the kibana user
    Value:
      Fn::GetAtt:
        - ESCognito
        - KibanaUser

Transform: AWS::Serverless-2016-10-31
