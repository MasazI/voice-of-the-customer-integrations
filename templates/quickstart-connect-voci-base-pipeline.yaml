AWSTemplateFormatVersion: '2010-09-09'
Description: 'Connect - Comprehend/Transcribe Connect Demo'

Parameters:
  kibanaUser:
    Default: kibana
    Description: The name of the user that is used to log into kibana.
    Type: String

Mappings: 
  RegionMap: 
    us-east-1: 
      "S3Bucket": "serverless-analytics"
    us-west-2: 
      "S3Bucket": "us-west-2.serverless-analytics"
    ap-southeast-2:
      "S3Bucket": "ap-southeast-2.serverless-analytics"

Resources:

  CognitoAccessForAmazonES:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: es.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonESCognitoAccess
    

  CognitoAccessForAmazonESPolicy:
    Properties:
      Description: elasticsearch and rekognition cognito role
      PolicyDocument:
        Statement:
        - Action:
          - iam:GetRole
          - iam:PassRole
          - iam:CreateRole
          - iam:AttachRolePolicy
          - ec2:DescribeVpcs
          - cognito-identity:ListIdentityPools
          - cognito-identity:DescribeIdentityPool
          - cognito-idp:ListUserPools
          - cognito-idp:DescribeUserPool
          - cognito-idp:CreateUserPoolDomain
          - cognito-idp:DeleteUserPoolDomain
          Effect: Allow
          Resource: '*'
        Version: '2012-10-17'
      Roles:
      - Ref: CognitoAccessForAmazonES
    Type: AWS::IAM::ManagedPolicy
  CognitoApplicationClient:
    Properties:
      ClientName:
        Fn::Sub: ${AWS::StackName}-appclient
      GenerateSecret: false
      RefreshTokenValidity: 2
      UserPoolId:
        Ref: CognitoUserPool
    Type: AWS::Cognito::UserPoolClient
  CognitoAuthKibanaPolicy:
    Properties:
      Description: elasticsearch and rekognition cognito role
      PolicyDocument:
        Statement:
        - Action:
          - es:ESHttp*
          Effect: Allow
          Resource:
            Fn::Sub: arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/*
        Version: '2012-10-17'
      Roles:
      - Ref: CognitoAuthRole
    Type: AWS::IAM::ManagedPolicy
  CognitoAuthRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRoleWithWebIdentity
          Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
        Version: '2012-10-17'
    Type: AWS::IAM::Role
  CognitoIdentityPool:
    Properties:
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
      - ClientId:
          Ref: CognitoApplicationClient
        ProviderName:
          Fn::Sub: cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}
        ServerSideTokenCheck: false
    Type: AWS::Cognito::IdentityPool
  CognitoIdentityPoolRole:
    Properties:
      IdentityPoolId:
        Ref: CognitoIdentityPool
      Roles:
        authenticated:
          Fn::GetAtt:
          - CognitoAuthRole
          - Arn
        unauthenticated:
          Fn::GetAtt:
          - CognitoUnauthRole
          - Arn
    Type: AWS::Cognito::IdentityPoolRoleAttachment
  CognitoUnauthRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRoleWithWebIdentity
          Effect: Allow
          Principal:
            Federated: cognito-identity.amazonaws.com
        Version: '2012-10-17'
    Type: AWS::IAM::Role
  CognitoUserPool:
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailMessage: 'Welcome to the Connect Indexer. Username: {username} Pwd:
            {####}'
          EmailSubject: Welcome to Connect Indexer.
          SMSMessage: 'Welcome to Connect Indexer. Username: {username} Pwd: {####}'
        UnusedAccountValidityDays: 14
      AliasAttributes:
      - email
      AutoVerifiedAttributes:
      - email
      EmailVerificationMessage: 'Welcome to the Connect Indexer. Here is your confirmation
        code: {####}'
      EmailVerificationSubject: Connect Indexer Email Confirmation Code
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      UserPoolName:
        Fn::Sub: ${AWS::StackName}-users
    Type: AWS::Cognito::UserPool
  
  elasticsearchCognito:
    Properties:
      CodeUri:
        Bucket: !FindInMap [RegionMap, !Ref "AWS::Region", S3Bucket]
        Key: ConnectTranscribeComprehendESWorkshop/elasticsearchCognito.zip
      Description: ''
      Environment:
        Variables:
          STEP_FUNCTION_ARN:
            Ref: CfnStepFunction
      Handler: elasticsearch-cognito.lambda_handler
      MemorySize: 512
      Role:
        Fn::GetAtt:
        - LambdaServiceRole
        - Arn
      Runtime: python2.7
      Timeout: 240
    Type: AWS::Serverless::Function

  checkElasticsearchStatus:
    Properties:
      CodeUri:
        Bucket: !FindInMap [RegionMap, !Ref "AWS::Region", S3Bucket]
        Key: ConnectTranscribeComprehendESWorkshop/checkElasticsearchStatus.zip
      Description: ''
      Handler: elasticsearch-cognito.check_status
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - LambdaServiceRole
        - Arn
      Runtime: python2.7
      Timeout: 15
    Type: AWS::Serverless::Function

  CfnStepFunction:
    DependsOn:
    - checkElasticsearchStatus
    Properties:
      DefinitionString:
        Fn::Sub: "{\n  \"StartAt\": \"checkAction\",\n  \"States\": {\n    \"checkAction\"\
          : { \n        \"Type\": \"Task\",\n        \"Resource\": \"${checkElasticsearchStatus.Arn}\"\
          ,\n        \"InputPath\": \"$\",\n        \"ResultPath\": \"$\",\n     \
          \   \"Next\": \"IsActionComplete\"\n    },\n    \"IsActionComplete\": {\n\
          \     \"Type\": \"Choice\",\n                  \"Choices\": [\n        \
          \            {\n                      \"Variable\": \"$.response.Status\"\
          ,\n                      \"StringEquals\": \"IN_PROCESS\",\n           \
          \           \"Next\": \"Wait\"\n                    }\n                \
          \  ],\n                  \"Default\": \"Complete\"\n     },\n    \"Wait\"\
          : {\n      \"Type\": \"Wait\",\n      \"Seconds\": 30,\n      \"Next\":\
          \ \"checkAction\"\n    },\n    \"Complete\": { \n      \"Type\": \"Pass\"\
          ,\n      \"End\": true\n    }\n  }\n}"
      RoleArn:
        Fn::GetAtt:
        - StatesExecutionRole
        - Arn
    Type: AWS::StepFunctions::StateMachine

  ESCognito:
    DependsOn:
    - CallsElasticSearch
    - CognitoAuthKibanaPolicy
    - CognitoAccessForAmazonES
    - elasticsearchCognito
    - CognitoIdentityPool
    - CognitoUserPool
    - CallsElasticSearch
    Properties:
      IdentityPoolId:
        Ref: CognitoIdentityPool
      ServiceToken:
        Fn::GetAtt:
        - elasticsearchCognito
        - Arn
      StackName:
        Ref: AWS::StackName
      UserPoolId:
        Ref: CognitoUserPool
      esCluster:
        Ref: CallsElasticSearch
      esRoleArn:
        Fn::GetAtt:
        - CognitoAccessForAmazonES
        - Arn
      kibanaUser:
        Ref: kibanaUser
    Type: Custom::ESName


  AudioTranscriptionBucket:
    Type: AWS::S3::Bucket

  CTRStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: Connect-CTR-Stream
      RetentionPeriodHours: 24
      ShardCount: 1

  CallsElasticSearch:
    Type: AWS::Elasticsearch::Domain
    Properties:
      ElasticsearchVersion: 6.3
      ElasticsearchClusterConfig:
        InstanceCount: '1'
        InstanceType: 'm4.large.elasticsearch'
      EBSOptions:
        EBSEnabled: 'true'
        VolumeSize: 10
        VolumeType: gp2
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Join [ ":", [ "arn:aws:iam:", !Ref "AWS::AccountId", 'root'] ]
            Action: 'es:*'
            Resource: '*'

  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - Fn::Sub: states.${AWS::Region}.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - lambda:InvokeFunction
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: StatesExecutionPolicy
    

  LambdaServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Statement:
            - Action:
              - s3:*
              - comprehend:*
              - transcribe:*
              - es:*
              - states:StartExecution
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - kinesis:GetRecords
              - kinesis:GetShardIterator
              - kinesis:DescribeStream
              - kinesis:ListStreams
              - cognito-idp:*
              - iam:PassRole
              - kms:*
              Effect: Allow
              Resource: '*'
            Version: '2012-10-17'
          PolicyName: LambdaServiceRolePolicy

  indexIntoElasticsearch:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !FindInMap [RegionMap, !Ref "AWS::Region", S3Bucket]
        Key: ConnectTranscribeComprehendESWorkshop/IndexS3TranscriptionDataIntoES.zip
      Description: 'Lambda funcion that indexes the Transcription and NLP entties/keyphrases'
      Environment:
        Variables:
          ES_DOMAIN:
            Fn::GetAtt:
            - CallsElasticSearch
            - DomainEndpoint
          ES_EPISODE_INDEX: 'reinvent-2018-workshop'
      Handler: upload_to_elasticsearch.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - LambdaServiceRole
        - Arn
      Runtime: python2.7
      Timeout: 60

  startTranscriptionJob:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !FindInMap [RegionMap, !Ref "AWS::Region", S3Bucket]
        Key: ConnectTranscribeComprehendESWorkshop/StartTranscriptionJob.zip
      Description: 'Lambda funcion that starts the Transcription job'
      Handler: podcast_transcribe.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - LambdaServiceRole
        - Arn
      Runtime: python2.7
      Timeout: 60

  checkTranscriptionJob:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !FindInMap [RegionMap, !Ref "AWS::Region", S3Bucket]
        Key: ConnectTranscribeComprehendESWorkshop/CheckTranscriptionJob.zip
      Description: 'Lambda funcion that starts the Transcription job'
      Handler: check_transcribe.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - LambdaServiceRole
        - Arn
      Runtime: python2.7
      Timeout: 60

  processTranscriptionJob:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !FindInMap [RegionMap, !Ref "AWS::Region", S3Bucket]
        Key: ConnectTranscribeComprehendESWorkshop/ProcessTranscription.zip
      Description: 'Lambda funcion that starts the Transcription job'
      Environment:
        Variables:
          BUCKET_NAME:
            Ref: AudioTranscriptionBucket
      Handler: process_transcription_full_text.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - LambdaServiceRole
        - Arn
      Runtime: python2.7
      Timeout: 60

  processAudioFile:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        Fn::Sub: "{\n  \"StartAt\": \"Start Amazon Transcribe\",\n  \"States\": {\n    \"Start Amazon Transcribe\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${startTranscriptionJob.Arn}\",\n      \"InputPath\": \"$\",\n      \"ResultPath\": \"$.transcribe\",\n      \"Next\": \"Check Transcribe Status\",\n      \"Retry\": [\n        {\n          \"ErrorEquals\": [ \"ThrottlingException\" ],\n          \"IntervalSeconds\": 120,\n          \"BackoffRate\": 1,\n          \"MaxAttempts\": 1000\n        },\n        {\n          \"ErrorEquals\": [ \"States.ALL\" ],\n          \"IntervalSeconds\": 60,\n          \"BackoffRate\": 2,\n          \"MaxAttempts\": 3\n        }\n      ]\n    },\n    \"Check Transcribe Status\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${checkTranscriptionJob.Arn}\",\n      \"InputPath\": \"$.transcribe\",\n      \"ResultPath\": \"$.transcribeStatus\",\n      \"Next\": \"Is Transcribe Completed?\"\n    },\n    \"Wait for Transcribe Completion\": {\n      \"Type\": \"Wait\",\n      \"Seconds\": 60,\n      \"Next\": \"Check Transcribe Status\"\n    },\n    \"Is Transcribe Completed?\": {\n      \"Type\": \"Choice\",\n      \"Choices\": [\n        {\n          \"Variable\": \"$.transcribeStatus.status\",\n          \"StringEquals\": \"COMPLETED\",\n          \"Next\": \"Process Transcription\"\n        }\n      ],\n      \"Default\": \"Wait for Transcribe Completion\"\n    },\n    \"Process Transcription\": {\n      \"Type\": \"Parallel\",\n      \"Branches\": [\n        {\n          \"StartAt\": \"Generate Full Text Transcript\",\n          \"States\": {\n            \"Generate Full Text Transcript\": {\n              \"Type\": \"Task\",\n              \"Resource\": \"${processTranscriptionJob.Arn}\",\n              \"End\": true\n            }\n          }\n        }\n      ],\n      \"ResultPath\": \"$.processedTranscription\",\n      \"Next\": \"Upload To Elasticsearch\"\n    },\n    \"Upload To Elasticsearch\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${indexIntoElasticsearch.Arn}\",\n      \"InputPath\": \"$\",\n      \"ResultPath\": \"$.elasticsearchResult\",\n      \"Next\": \"Complete\"\n    },\n    \"Complete\": {\n      \"Type\": \"Succeed\"\n    }\n  }\n}"
      RoleArn:
        Fn::GetAtt:
        - StatesExecutionRole
        - Arn

  indexCTRInElasticSearch:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !FindInMap [RegionMap, !Ref "AWS::Region", S3Bucket]
        Key: ConnectTranscribeComprehendESWorkshop/IndexCTRInElasticSearch.zip
      Description: 'Lambda funcion that starts the Transcription job'
      Environment:
        Variables:
          ES_DOMAIN:
            Fn::GetAtt:
            - CallsElasticSearch
            - DomainEndpoint
          ES_EPISODE_INDEX: 'reinvent-2018-workshop'
      Handler: upload_to_elasticsearch.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - LambdaServiceRole
        - Arn
      Runtime: python2.7
      Timeout: 60

  kickOffStepFunctionsFromS3Event:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !FindInMap [RegionMap, !Ref "AWS::Region", S3Bucket]
        Key: ConnectTranscribeComprehendESWorkshop/S3ProcessNewAudio.zip
      Description: 'Lambda funcion that starts the Transcription job'
      Environment:
        Variables:
          STEP_FUNCTIONS_ARN: !Ref processAudioFile
      Handler: lambda_function.lambda_handler
      MemorySize: 256
      Role:
        Fn::GetAtt:
        - LambdaServiceRole
        - Arn
      Runtime: python2.7
      Timeout: 60

Outputs:
  KibanaUrl:
    Description: A hyperlink to the Kibana tool
    Value:
      Fn::Sub: https://${CallsElasticSearch.DomainEndpoint}/_plugin/kibana/

  KibanaPassword:
    Description: The password for the kibana user
    Value:
      Fn::GetAtt:
      - ESCognito
      - KibanaPassword
      
  KibanaUser:
    Description: The username for the kibana user
    Value:
      Fn::GetAtt:
      - ESCognito
      - KibanaUser

Transform: AWS::Serverless-2016-10-31

